	.text
	.globl _start
	.globl main
_start:
	jal main
	nop
	move $a0, $v0
	li $v0, 17
	syscall
printf:
	addi $sp, $sp, -32
	sw $ra, 28($sp)
	sw $fp, 24($sp)
	sw $s0, 20($sp)
	sw $s1, 16($sp)
	sw $s2, 12($sp)
	sw $s3, 8($sp)
	sw $s4, 4($sp)
	move $fp, $sp
	move $s0, $a0
	move $s1, $a1
	move $s2, $a2
	move $s3, $a3
	li $s4, 0
printf_loop_start:
	lb $t0, 0($s0)
	beq $t0, $zero, printf_end
	nop
	li $t1, '%'
	bne $t0, $t1, printf_print_char_direct
	nop
	addi $s0, $s0, 1
	lb $t0, 0($s0)
	beq $t0, $zero, printf_end
	nop
	li $t1, 'd'
	bne $t0, $t1, printf_handle_literal_percent
	nop
	move $t1, $s1
	beq $s4, 1, printf_use_arg2
	nop
	beq $s4, 2, printf_use_arg3
	nop
	j printf_perform_print_int
	nop
printf_use_arg2:
	move $t1, $s2
	j printf_perform_print_int
	nop
printf_use_arg3:
	move $t1, $s3
printf_perform_print_int:
	move $a0, $t1
	li $v0, 1
	syscall
	addi $s4, $s4, 1
	j printf_loop_continue
	nop
printf_handle_literal_percent:
	li $t1, '%'
	bne $t0, $t1, printf_unknown_specifier
	nop
printf_print_char_direct:
	move $a0, $t0
	li $v0, 11
	syscall
	j printf_loop_continue
	nop
printf_unknown_specifier:
	li $a0, '%'
	li $v0, 11
	syscall
	move $a0, $t0
	li $v0, 11
	syscall
	j printf_loop_continue
	nop
printf_loop_continue:
	addi $s0, $s0, 1
	j printf_loop_start
	nop
printf_end:
	lw $s4, 4($sp)
	lw $s3, 8($sp)
	lw $s2, 12($sp)
	lw $s1, 16($sp)
	lw $s0, 20($sp)
	lw $fp, 24($sp)
	lw $ra, 28($sp)
	addi $sp, $sp, 32
	jr $ra
	nop
getint:
	addi $sp, $sp, -8
	sw $ra, 4($sp)
	sw $fp, 0($sp)
	move $fp, $sp
	li $v0, 5
	syscall
	lw $fp, 0($sp)
	lw $ra, 4($sp)
	addi $sp, $sp, 8
	jr $ra
	nop
	# Parameter 'i' assigned stack offset: -4($fp)
	# Local var '%tmp_addsub_2' assigned stack offset: -8($fp)
	# Local var '%tmp_addsub_4' assigned stack offset: -12($fp)
	# Local var '%tmp_addsub_6' assigned stack offset: -16($fp)
	# Local var '%tmp_call_fib_3' assigned stack offset: -20($fp)
	# Local var '%tmp_call_fib_5' assigned stack offset: -24($fp)
	# Local var '%tmp_eq_0' assigned stack offset: -28($fp)
	# Local var '%tmp_eq_1' assigned stack offset: -32($fp)
	# Local var 'ret' assigned stack offset: -36($fp)
	# Function fib: totalLocalVarSize = -36, frameSize = 44
fib:
	# Prologue for fib
	addiu $sp, $sp, -44
	sw $ra, 40($sp)
	sw $fp, 36($sp)
	addiu $fp, $sp, 36
	sw $a0, -4($fp)
	# Stored $a0 (param 'i') to -4($fp)
	# CallPureInst: CALL_PURE __builtin_eq_int(i:INTEGER, 1) -> (%tmp_eq_0:INTEGER)
	# Ensuring operand i:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -4($fp)
	# Loaded local var i from -4($fp) into $t0
	# Ensuring operand 1 is in a register
	# Reserved temporary register $t1
	li $t1, 1
	# Reserved temporary register $t2
	xor $t2, $t0, $t1
	sltiu $t2, $t2, 1
	sw $t2, -28($fp)
	# Stored result of pure call to local %tmp_eq_0 at -28($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# CondJumpInst: if (%tmp_eq_0:INTEGER) goto .L_if_then_0 else goto .L_if_endif_2
	# Ensuring operand %tmp_eq_0:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -28($fp)
	# Loaded local var %tmp_eq_0 from -28($fp) into $t0
	bnez $t0, .L_if_then_0
	nop
	j .L_if_endif_2
	nop
	# Released temporary register $t0
	# --- End of CondJumpInst ---
.L_if_then_0:
	# --- Calling function: printf ---
	# Ensuring operand label _S0 is in a register
	# Reserved temporary register $t0
	la $t0, _S0
	# Loaded address of label _S0 into $t0
	move $a0, $t0
	# Ensuring operand i:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -4($fp)
	# Loaded local var i from -4($fp) into $t1
	move $a1, $t1
	# Ensuring operand 1 is in a register
	# Reserved temporary register $t2
	li $t2, 1
	move $a2, $t2
	jal printf
	nop
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# --- End of call to printf ---
	# Ensuring operand 1 is in a register
	# Reserved temporary register $t0
	li $t0, 1
	move $v0, $t0
	j fib_epilogue
	nop
.L_if_endif_2:
	# CallPureInst: CALL_PURE __builtin_eq_int(i:INTEGER, 2) -> (%tmp_eq_1:INTEGER)
	# Ensuring operand i:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -4($fp)
	# Loaded local var i from -4($fp) into $t1
	# Ensuring operand 2 is in a register
	# Reserved temporary register $t2
	li $t2, 2
	# Reserved temporary register $t3
	xor $t3, $t1, $t2
	sltiu $t3, $t3, 1
	sw $t3, -32($fp)
	# Stored result of pure call to local %tmp_eq_1 at -32($fp)
	# Released temporary register $t1
	# Released temporary register $t2
	# Released temporary register $t3
	# CondJumpInst: if (%tmp_eq_1:INTEGER) goto .L_if_then_3 else goto .L_if_endif_5
	# Ensuring operand %tmp_eq_1:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -32($fp)
	# Loaded local var %tmp_eq_1 from -32($fp) into $t1
	bnez $t1, .L_if_then_3
	nop
	j .L_if_endif_5
	nop
	# Released temporary register $t1
	# --- End of CondJumpInst ---
.L_if_then_3:
	# --- Calling function: printf ---
	# Ensuring operand label _S0 is in a register
	# Reserved temporary register $t1
	la $t1, _S0
	# Loaded address of label _S0 into $t1
	move $a0, $t1
	# Ensuring operand i:INTEGER is in a register
	# Reserved temporary register $t2
	lw $t2, -4($fp)
	# Loaded local var i from -4($fp) into $t2
	move $a1, $t2
	# Ensuring operand 1 is in a register
	# Reserved temporary register $t3
	li $t3, 1
	move $a2, $t3
	jal printf
	nop
	# Released temporary register $t1
	# Released temporary register $t2
	# Released temporary register $t3
	# --- End of call to printf ---
	# Ensuring operand 1 is in a register
	# Reserved temporary register $t1
	li $t1, 1
	move $v0, $t1
	j fib_epilogue
	nop
.L_if_endif_5:
	# CallPureInst: CALL_PURE __builtin_sub_int(i:INTEGER, 1) -> (%tmp_addsub_2:INTEGER)
	# Ensuring operand i:INTEGER is in a register
	# Reserved temporary register $t2
	lw $t2, -4($fp)
	# Loaded local var i from -4($fp) into $t2
	# Ensuring operand 1 is in a register
	# Reserved temporary register $t3
	li $t3, 1
	# Reserved temporary register $t4
	subu $t4, $t2, $t3
	sw $t4, -8($fp)
	# Stored result of pure call to local %tmp_addsub_2 at -8($fp)
	# Released temporary register $t2
	# Released temporary register $t3
	# Released temporary register $t4
	# --- Calling function: fib ---
	# Ensuring operand %tmp_addsub_2:INTEGER is in a register
	# Reserved temporary register $t2
	lw $t2, -8($fp)
	# Loaded local var %tmp_addsub_2 from -8($fp) into $t2
	move $a0, $t2
	jal fib
	nop
	# Released temporary register $t2
	sw $v0, -20($fp)
	# Variable %tmp_call_fib_3 (result of fib) stored from $v0
	# --- End of call to fib ---
	# CallPureInst: CALL_PURE __builtin_sub_int(i:INTEGER, 2) -> (%tmp_addsub_4:INTEGER)
	# Ensuring operand i:INTEGER is in a register
	# Reserved temporary register $t2
	lw $t2, -4($fp)
	# Loaded local var i from -4($fp) into $t2
	# Ensuring operand 2 is in a register
	# Reserved temporary register $t3
	li $t3, 2
	# Reserved temporary register $t4
	subu $t4, $t2, $t3
	sw $t4, -12($fp)
	# Stored result of pure call to local %tmp_addsub_4 at -12($fp)
	# Released temporary register $t2
	# Released temporary register $t3
	# Released temporary register $t4
	# --- Calling function: fib ---
	# Ensuring operand %tmp_addsub_4:INTEGER is in a register
	# Reserved temporary register $t2
	lw $t2, -12($fp)
	# Loaded local var %tmp_addsub_4 from -12($fp) into $t2
	move $a0, $t2
	jal fib
	nop
	# Released temporary register $t2
	sw $v0, -24($fp)
	# Variable %tmp_call_fib_5 (result of fib) stored from $v0
	# --- End of call to fib ---
	# CallPureInst: CALL_PURE __builtin_add_int(%tmp_call_fib_3:INTEGER, %tmp_call_fib_5:INTEGER) -> (%tmp_addsub_6:INTEGER)
	# Ensuring operand %tmp_call_fib_3:INTEGER is in a register
	# Reserved temporary register $t2
	lw $t2, -20($fp)
	# Loaded local var %tmp_call_fib_3 from -20($fp) into $t2
	# Ensuring operand %tmp_call_fib_5:INTEGER is in a register
	# Reserved temporary register $t3
	lw $t3, -24($fp)
	# Loaded local var %tmp_call_fib_5 from -24($fp) into $t3
	# Reserved temporary register $t4
	addu $t4, $t2, $t3
	sw $t4, -16($fp)
	# Stored result of pure call to local %tmp_addsub_6 at -16($fp)
	# Released temporary register $t2
	# Released temporary register $t3
	# Released temporary register $t4
	# AssignInst: ret = %tmp_addsub_6:INTEGER
	# Ensuring operand %tmp_addsub_6:INTEGER is in a register
	# Reserved temporary register $t2
	lw $t2, -16($fp)
	# Loaded local var %tmp_addsub_6 from -16($fp) into $t2
	sw $t2, -36($fp)
	# Stored to local ret at -36($fp)
	# Released temporary register $t2
	# --- Calling function: printf ---
	# Ensuring operand label _S0 is in a register
	# Reserved temporary register $t2
	la $t2, _S0
	# Loaded address of label _S0 into $t2
	move $a0, $t2
	# Ensuring operand i:INTEGER is in a register
	# Reserved temporary register $t3
	lw $t3, -4($fp)
	# Loaded local var i from -4($fp) into $t3
	move $a1, $t3
	# Ensuring operand ret:INTEGER is in a register
	# Reserved temporary register $t4
	lw $t4, -36($fp)
	# Loaded local var ret from -36($fp) into $t4
	move $a2, $t4
	jal printf
	nop
	# Released temporary register $t2
	# Released temporary register $t3
	# Released temporary register $t4
	# --- End of call to printf ---
	# Ensuring operand ret:INTEGER is in a register
	# Reserved temporary register $t2
	lw $t2, -36($fp)
	# Loaded local var ret from -36($fp) into $t2
	move $v0, $t2
	j fib_epilogue
	nop
fib_epilogue:
	# Epilogue for fib
	lw $ra, 4($fp)
	lw $fp, 0($fp)
	addiu $sp, $sp, 44
	jr $ra
	nop
	# Local var '%tmp_call_fib_8' assigned stack offset: -4($fp)
	# Local var '%tmp_call_getint_7' assigned stack offset: -8($fp)
	# Function main: totalLocalVarSize = -8, frameSize = 16
main:
	# Prologue for main
	addiu $sp, $sp, -16
	sw $ra, 12($sp)
	sw $fp, 8($sp)
	addiu $fp, $sp, 8
	# --- Calling function: printf ---
	# Ensuring operand label _S1 is in a register
	# Reserved temporary register $t0
	la $t0, _S1
	# Loaded address of label _S1 into $t0
	move $a0, $t0
	# Ensuring operand 1 is in a register
	# Reserved temporary register $t1
	li $t1, 1
	move $a1, $t1
	# Ensuring operand 2 is in a register
	# Reserved temporary register $t2
	li $t2, 2
	move $a2, $t2
	jal printf
	nop
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# --- End of call to printf ---
	# --- Calling function: getint ---
	jal getint
	nop
	sw $v0, -8($fp)
	# Variable %tmp_call_getint_7 (result of getint) stored from $v0
	# --- End of call to getint ---
	# --- Calling function: fib ---
	# Ensuring operand %tmp_call_getint_7:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -8($fp)
	# Loaded local var %tmp_call_getint_7 from -8($fp) into $t0
	move $a0, $t0
	jal fib
	nop
	# Released temporary register $t0
	sw $v0, -4($fp)
	# Variable %tmp_call_fib_8 (result of fib) stored from $v0
	# --- End of call to fib ---
	# --- Calling function: printf ---
	# Ensuring operand label _S2 is in a register
	# Reserved temporary register $t0
	la $t0, _S2
	# Loaded address of label _S2 into $t0
	move $a0, $t0
	# Ensuring operand %tmp_call_fib_8:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -4($fp)
	# Loaded local var %tmp_call_fib_8 from -4($fp) into $t1
	move $a1, $t1
	jal printf
	nop
	# Released temporary register $t0
	# Released temporary register $t1
	# --- End of call to printf ---
	# Ensuring operand 0 is in a register
	# Reserved temporary register $t0
	li $t0, 0
	move $v0, $t0
	j main_epilogue
	nop
main_epilogue:
	# Epilogue for main
	lw $ra, 4($fp)
	lw $fp, 0($fp)
	addiu $sp, $sp, 16
	jr $ra
	nop

.data
_newline: .asciiz "\n"
# String Literals
_S0: .asciiz "fib(%d) = %d\n"
_S1: .asciiz "%d, %d\n"
_S2: .asciiz "%d\n"

