	.text
	.globl _start
	.globl main
_start:
	jal main
	nop
	move $a0, $v0
	li $v0, 17
	syscall
printf:
	addi $sp, $sp, -32
	sw $ra, 28($sp)
	sw $fp, 24($sp)
	sw $s0, 20($sp)
	sw $s1, 16($sp)
	sw $s2, 12($sp)
	sw $s3, 8($sp)
	sw $s4, 4($sp)
	move $fp, $sp
	move $s0, $a0
	move $s1, $a1
	move $s2, $a2
	move $s3, $a3
	li $s4, 0
printf_loop_start:
	lb $t0, 0($s0)
	beq $t0, $zero, printf_end
	nop
	li $t1, '%'
	bne $t0, $t1, printf_print_char_direct
	nop
	addi $s0, $s0, 1
	lb $t0, 0($s0)
	beq $t0, $zero, printf_end
	nop
	li $t1, 'd'
	bne $t0, $t1, printf_handle_literal_percent
	nop
	move $t1, $s1
	beq $s4, 1, printf_use_arg2
	nop
	beq $s4, 2, printf_use_arg3
	nop
	j printf_perform_print_int
	nop
printf_use_arg2:
	move $t1, $s2
	j printf_perform_print_int
	nop
printf_use_arg3:
	move $t1, $s3
printf_perform_print_int:
	move $a0, $t1
	li $v0, 1
	syscall
	addi $s4, $s4, 1
	j printf_loop_continue
	nop
printf_handle_literal_percent:
	li $t1, '%'
	bne $t0, $t1, printf_unknown_specifier
	nop
printf_print_char_direct:
	move $a0, $t0
	li $v0, 11
	syscall
	j printf_loop_continue
	nop
printf_unknown_specifier:
	li $a0, '%'
	li $v0, 11
	syscall
	move $a0, $t0
	li $v0, 11
	syscall
	j printf_loop_continue
	nop
printf_loop_continue:
	addi $s0, $s0, 1
	j printf_loop_start
	nop
printf_end:
	lw $s4, 4($sp)
	lw $s3, 8($sp)
	lw $s2, 12($sp)
	lw $s1, 16($sp)
	lw $s0, 20($sp)
	lw $fp, 24($sp)
	lw $ra, 28($sp)
	addi $sp, $sp, 32
	jr $ra
	nop
getint:
	addi $sp, $sp, -8
	sw $ra, 4($sp)
	sw $fp, 0($sp)
	move $fp, $sp
	li $v0, 5
	syscall
	lw $fp, 0($sp)
	lw $ra, 4($sp)
	addi $sp, $sp, 8
	jr $ra
	nop
	# Local var '%tmp_addsub_0' assigned stack offset: -4($fp) (size: 4 bytes)
	# Local var '%tmp_addsub_1' assigned stack offset: -8($fp) (size: 4 bytes)
	# Local var '%tmp_addsub_15' assigned stack offset: -12($fp) (size: 4 bytes)
	# Local var '%tmp_addsub_18' assigned stack offset: -16($fp) (size: 4 bytes)
	# Local var '%tmp_addsub_19' assigned stack offset: -20($fp) (size: 4 bytes)
	# Local var '%tmp_addsub_20' assigned stack offset: -24($fp) (size: 4 bytes)
	# Local var '%tmp_addsub_3' assigned stack offset: -28($fp) (size: 4 bytes)
	# Local var '%tmp_addsub_4' assigned stack offset: -32($fp) (size: 4 bytes)
	# Local var '%tmp_muldiv_10' assigned stack offset: -36($fp) (size: 4 bytes)
	# Local var '%tmp_muldiv_11' assigned stack offset: -40($fp) (size: 4 bytes)
	# Local var '%tmp_muldiv_12' assigned stack offset: -44($fp) (size: 4 bytes)
	# Local var '%tmp_muldiv_13' assigned stack offset: -48($fp) (size: 4 bytes)
	# Local var '%tmp_muldiv_14' assigned stack offset: -52($fp) (size: 4 bytes)
	# Local var '%tmp_muldiv_16' assigned stack offset: -56($fp) (size: 4 bytes)
	# Local var '%tmp_muldiv_17' assigned stack offset: -60($fp) (size: 4 bytes)
	# Local var '%tmp_muldiv_6' assigned stack offset: -64($fp) (size: 4 bytes)
	# Local var '%tmp_muldiv_7' assigned stack offset: -68($fp) (size: 4 bytes)
	# Local var '%tmp_muldiv_8' assigned stack offset: -72($fp) (size: 4 bytes)
	# Local var '%tmp_muldiv_9' assigned stack offset: -76($fp) (size: 4 bytes)
	# Local var '%tmp_uneg_2' assigned stack offset: -80($fp) (size: 4 bytes)
	# Local var '%tmp_uneg_5' assigned stack offset: -84($fp) (size: 4 bytes)
	# Local var 'd' assigned stack offset: -88($fp) (size: 4 bytes)
	# Local var 'e' assigned stack offset: -92($fp) (size: 4 bytes)
	# Local var 'f' assigned stack offset: -96($fp) (size: 4 bytes)
	# Local var 'testBlock' assigned stack offset: -100($fp) (size: 4 bytes)
	# Function main: totalLocalVarSize = -100, frameSize = 108
main:
	# Prologue for main
	addiu $sp, $sp, -108
	sw $ra, 104($sp)
	sw $fp, 100($sp)
	addiu $fp, $sp, 100
	# --- Calling function: printf ---
	# Ensuring operand label _S0 is in a register
	# Reserved temporary register $t0
	la $t0, _S0
	# Loaded address of label _S0 into $t0
	move $a0, $t0
	# Ensuring operand testBlock:INTEGER is in a register
	# Reserved temporary register $t1
	la $t1, testBlock
	lw $t1, 0($t1)
	# Loaded global var testBlock into $t1
	move $a1, $t1
	jal printf
	nop
	# Released temporary register $t0
	# Released temporary register $t1
	# --- End of call to printf ---
	# AssignInst: testBlock = 2
	# Ensuring operand 2 is in a register
	# Reserved temporary register $t0
	li $t0, 2
	sw $t0, -100($fp)
	# Stored to local testBlock at -100($fp)
	# Released temporary register $t0
	# --- Calling function: printf ---
	# Ensuring operand label _S0 is in a register
	# Reserved temporary register $t0
	la $t0, _S0
	# Loaded address of label _S0 into $t0
	move $a0, $t0
	# Ensuring operand testBlock:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -100($fp)
	# Loaded local var testBlock from -100($fp) into $t1
	move $a1, $t1
	jal printf
	nop
	# Released temporary register $t0
	# Released temporary register $t1
	# --- End of call to printf ---
	# AssignInst: testBlock = 3
	# Ensuring operand 3 is in a register
	# Reserved temporary register $t0
	li $t0, 3
	sw $t0, -100($fp)
	# Stored to local testBlock at -100($fp)
	# Released temporary register $t0
	# --- Calling function: printf ---
	# Ensuring operand label _S0 is in a register
	# Reserved temporary register $t0
	la $t0, _S0
	# Loaded address of label _S0 into $t0
	move $a0, $t0
	# Ensuring operand testBlock:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -100($fp)
	# Loaded local var testBlock from -100($fp) into $t1
	move $a1, $t1
	jal printf
	nop
	# Released temporary register $t0
	# Released temporary register $t1
	# --- End of call to printf ---
	# AssignInst: d = 10
	# Ensuring operand 10 is in a register
	# Reserved temporary register $t0
	li $t0, 10
	sw $t0, -88($fp)
	# Stored to local d at -88($fp)
	# Released temporary register $t0
	# AssignInst: e = 9
	# Ensuring operand 9 is in a register
	# Reserved temporary register $t0
	li $t0, 9
	sw $t0, -92($fp)
	# Stored to local e at -92($fp)
	# Released temporary register $t0
	# AssignInst: f = 8
	# Ensuring operand 8 is in a register
	# Reserved temporary register $t0
	li $t0, 8
	sw $t0, -96($fp)
	# Stored to local f at -96($fp)
	# Released temporary register $t0
	# CallPureInst: CALL_PURE __builtin_add_int(d:INTEGER, e:INTEGER) -> (%tmp_addsub_0:INTEGER)
	# Ensuring operand d:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -88($fp)
	# Loaded local var d from -88($fp) into $t0
	# Ensuring operand e:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -92($fp)
	# Loaded local var e from -92($fp) into $t1
	# Reserved temporary register $t2
	addu $t2, $t0, $t1
	sw $t2, -4($fp)
	# Stored result of pure call to local %tmp_addsub_0 at -4($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# CallPureInst: CALL_PURE __builtin_add_int(%tmp_addsub_0:INTEGER, f:INTEGER) -> (%tmp_addsub_1:INTEGER)
	# Ensuring operand %tmp_addsub_0:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -4($fp)
	# Loaded local var %tmp_addsub_0 from -4($fp) into $t0
	# Ensuring operand f:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -96($fp)
	# Loaded local var f from -96($fp) into $t1
	# Reserved temporary register $t2
	addu $t2, $t0, $t1
	sw $t2, -8($fp)
	# Stored result of pure call to local %tmp_addsub_1 at -8($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# CallPureInst: CALL_PURE __builtin_sub_int(0, d:INTEGER) -> (%tmp_uneg_2:INTEGER)
	# Ensuring operand 0 is in a register
	# Reserved temporary register $t0
	li $t0, 0
	# Ensuring operand d:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -88($fp)
	# Loaded local var d from -88($fp) into $t1
	# Reserved temporary register $t2
	subu $t2, $t0, $t1
	sw $t2, -80($fp)
	# Stored result of pure call to local %tmp_uneg_2 at -80($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# CallPureInst: CALL_PURE __builtin_sub_int(%tmp_uneg_2:INTEGER, e:INTEGER) -> (%tmp_addsub_3:INTEGER)
	# Ensuring operand %tmp_uneg_2:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -80($fp)
	# Loaded local var %tmp_uneg_2 from -80($fp) into $t0
	# Ensuring operand e:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -92($fp)
	# Loaded local var e from -92($fp) into $t1
	# Reserved temporary register $t2
	subu $t2, $t0, $t1
	sw $t2, -28($fp)
	# Stored result of pure call to local %tmp_addsub_3 at -28($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# CallPureInst: CALL_PURE __builtin_sub_int(%tmp_addsub_3:INTEGER, f:INTEGER) -> (%tmp_addsub_4:INTEGER)
	# Ensuring operand %tmp_addsub_3:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -28($fp)
	# Loaded local var %tmp_addsub_3 from -28($fp) into $t0
	# Ensuring operand f:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -96($fp)
	# Loaded local var f from -96($fp) into $t1
	# Reserved temporary register $t2
	subu $t2, $t0, $t1
	sw $t2, -32($fp)
	# Stored result of pure call to local %tmp_addsub_4 at -32($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# CallPureInst: CALL_PURE __builtin_sub_int(0, %tmp_addsub_4:INTEGER) -> (%tmp_uneg_5:INTEGER)
	# Ensuring operand 0 is in a register
	# Reserved temporary register $t0
	li $t0, 0
	# Ensuring operand %tmp_addsub_4:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -32($fp)
	# Loaded local var %tmp_addsub_4 from -32($fp) into $t1
	# Reserved temporary register $t2
	subu $t2, $t0, $t1
	sw $t2, -84($fp)
	# Stored result of pure call to local %tmp_uneg_5 at -84($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# CallPureInst: CALL_PURE __builtin_mod_int(d:INTEGER, f:INTEGER) -> (%tmp_muldiv_6:INTEGER)
	# Ensuring operand d:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -88($fp)
	# Loaded local var d from -88($fp) into $t0
	# Ensuring operand f:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -96($fp)
	# Loaded local var f from -96($fp) into $t1
	# Reserved temporary register $t2
	div $t0, $t1
	mfhi $t2
	sw $t2, -64($fp)
	# Stored result of pure call to local %tmp_muldiv_6 at -64($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# CallPureInst: CALL_PURE __builtin_div_int(%tmp_uneg_5:INTEGER, %tmp_muldiv_6:INTEGER) -> (%tmp_muldiv_7:INTEGER)
	# Ensuring operand %tmp_uneg_5:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -84($fp)
	# Loaded local var %tmp_uneg_5 from -84($fp) into $t0
	# Ensuring operand %tmp_muldiv_6:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -64($fp)
	# Loaded local var %tmp_muldiv_6 from -64($fp) into $t1
	# Reserved temporary register $t2
	div $t0, $t1
	mflo $t2
	sw $t2, -68($fp)
	# Stored result of pure call to local %tmp_muldiv_7 at -68($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# CallPureInst: CALL_PURE __builtin_mul_int(%tmp_addsub_1:INTEGER, %tmp_muldiv_7:INTEGER) -> (%tmp_muldiv_8:INTEGER)
	# Ensuring operand %tmp_addsub_1:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -8($fp)
	# Loaded local var %tmp_addsub_1 from -8($fp) into $t0
	# Ensuring operand %tmp_muldiv_7:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -68($fp)
	# Loaded local var %tmp_muldiv_7 from -68($fp) into $t1
	# Reserved temporary register $t2
	multu $t0, $t1
	mflo $t2
	sw $t2, -72($fp)
	# Stored result of pure call to local %tmp_muldiv_8 at -72($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# AssignInst: a = %tmp_muldiv_8:INTEGER
	# Ensuring operand %tmp_muldiv_8:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -72($fp)
	# Loaded local var %tmp_muldiv_8 from -72($fp) into $t0
	# Reserved temporary register $t1
	la $t1, a
	sw $t0, 0($t1)
	# Released temporary register $t1
	# Stored to global a
	# Released temporary register $t0
	# CallPureInst: CALL_PURE __builtin_mul_int(2, f:INTEGER) -> (%tmp_muldiv_9:INTEGER)
	# Ensuring operand 2 is in a register
	# Reserved temporary register $t0
	li $t0, 2
	# Ensuring operand f:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -96($fp)
	# Loaded local var f from -96($fp) into $t1
	# Reserved temporary register $t2
	multu $t0, $t1
	mflo $t2
	sw $t2, -76($fp)
	# Stored result of pure call to local %tmp_muldiv_9 at -76($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# CallPureInst: CALL_PURE __builtin_mul_int(2, %tmp_muldiv_9:INTEGER) -> (%tmp_muldiv_10:INTEGER)
	# Ensuring operand 2 is in a register
	# Reserved temporary register $t0
	li $t0, 2
	# Ensuring operand %tmp_muldiv_9:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -76($fp)
	# Loaded local var %tmp_muldiv_9 from -76($fp) into $t1
	# Reserved temporary register $t2
	multu $t0, $t1
	mflo $t2
	sw $t2, -36($fp)
	# Stored result of pure call to local %tmp_muldiv_10 at -36($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# CallPureInst: CALL_PURE __builtin_mul_int(2, %tmp_muldiv_10:INTEGER) -> (%tmp_muldiv_11:INTEGER)
	# Ensuring operand 2 is in a register
	# Reserved temporary register $t0
	li $t0, 2
	# Ensuring operand %tmp_muldiv_10:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -36($fp)
	# Loaded local var %tmp_muldiv_10 from -36($fp) into $t1
	# Reserved temporary register $t2
	multu $t0, $t1
	mflo $t2
	sw $t2, -40($fp)
	# Stored result of pure call to local %tmp_muldiv_11 at -40($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# CallPureInst: CALL_PURE __builtin_mul_int(2, %tmp_muldiv_11:INTEGER) -> (%tmp_muldiv_12:INTEGER)
	# Ensuring operand 2 is in a register
	# Reserved temporary register $t0
	li $t0, 2
	# Ensuring operand %tmp_muldiv_11:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -40($fp)
	# Loaded local var %tmp_muldiv_11 from -40($fp) into $t1
	# Reserved temporary register $t2
	multu $t0, $t1
	mflo $t2
	sw $t2, -44($fp)
	# Stored result of pure call to local %tmp_muldiv_12 at -44($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# CallPureInst: CALL_PURE __builtin_mul_int(2, %tmp_muldiv_12:INTEGER) -> (%tmp_muldiv_13:INTEGER)
	# Ensuring operand 2 is in a register
	# Reserved temporary register $t0
	li $t0, 2
	# Ensuring operand %tmp_muldiv_12:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -44($fp)
	# Loaded local var %tmp_muldiv_12 from -44($fp) into $t1
	# Reserved temporary register $t2
	multu $t0, $t1
	mflo $t2
	sw $t2, -48($fp)
	# Stored result of pure call to local %tmp_muldiv_13 at -48($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# AssignInst: b = %tmp_muldiv_13:INTEGER
	# Ensuring operand %tmp_muldiv_13:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -48($fp)
	# Loaded local var %tmp_muldiv_13 from -48($fp) into $t0
	# Reserved temporary register $t1
	la $t1, b
	sw $t0, 0($t1)
	# Released temporary register $t1
	# Stored to global b
	# Released temporary register $t0
	# CallPureInst: CALL_PURE __builtin_mul_int(b:INTEGER, c:INTEGER) -> (%tmp_muldiv_14:INTEGER)
	# Ensuring operand b:INTEGER is in a register
	# Reserved temporary register $t0
	la $t0, b
	lw $t0, 0($t0)
	# Loaded global var b into $t0
	# Ensuring operand c:INTEGER is in a register
	# Reserved temporary register $t1
	la $t1, c
	lw $t1, 0($t1)
	# Loaded global var c into $t1
	# Reserved temporary register $t2
	multu $t0, $t1
	mflo $t2
	sw $t2, -52($fp)
	# Stored result of pure call to local %tmp_muldiv_14 at -52($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# CallPureInst: CALL_PURE __builtin_add_int(a:INTEGER, %tmp_muldiv_14:INTEGER) -> (%tmp_addsub_15:INTEGER)
	# Ensuring operand a:INTEGER is in a register
	# Reserved temporary register $t0
	la $t0, a
	lw $t0, 0($t0)
	# Loaded global var a into $t0
	# Ensuring operand %tmp_muldiv_14:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -52($fp)
	# Loaded local var %tmp_muldiv_14 from -52($fp) into $t1
	# Reserved temporary register $t2
	addu $t2, $t0, $t1
	sw $t2, -12($fp)
	# Stored result of pure call to local %tmp_addsub_15 at -12($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# CallPureInst: CALL_PURE __builtin_div_int(d:INTEGER, e:INTEGER) -> (%tmp_muldiv_16:INTEGER)
	# Ensuring operand d:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -88($fp)
	# Loaded local var d from -88($fp) into $t0
	# Ensuring operand e:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -92($fp)
	# Loaded local var e from -92($fp) into $t1
	# Reserved temporary register $t2
	div $t0, $t1
	mflo $t2
	sw $t2, -56($fp)
	# Stored result of pure call to local %tmp_muldiv_16 at -56($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# CallPureInst: CALL_PURE __builtin_mod_int(%tmp_muldiv_16:INTEGER, f:INTEGER) -> (%tmp_muldiv_17:INTEGER)
	# Ensuring operand %tmp_muldiv_16:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -56($fp)
	# Loaded local var %tmp_muldiv_16 from -56($fp) into $t0
	# Ensuring operand f:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -96($fp)
	# Loaded local var f from -96($fp) into $t1
	# Reserved temporary register $t2
	div $t0, $t1
	mfhi $t2
	sw $t2, -60($fp)
	# Stored result of pure call to local %tmp_muldiv_17 at -60($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# CallPureInst: CALL_PURE __builtin_sub_int(%tmp_addsub_15:INTEGER, %tmp_muldiv_17:INTEGER) -> (%tmp_addsub_18:INTEGER)
	# Ensuring operand %tmp_addsub_15:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -12($fp)
	# Loaded local var %tmp_addsub_15 from -12($fp) into $t0
	# Ensuring operand %tmp_muldiv_17:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -60($fp)
	# Loaded local var %tmp_muldiv_17 from -60($fp) into $t1
	# Reserved temporary register $t2
	subu $t2, $t0, $t1
	sw $t2, -16($fp)
	# Stored result of pure call to local %tmp_addsub_18 at -16($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# AssignInst: c = %tmp_addsub_18:INTEGER
	# Ensuring operand %tmp_addsub_18:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -16($fp)
	# Loaded local var %tmp_addsub_18 from -16($fp) into $t0
	# Reserved temporary register $t1
	la $t1, c
	sw $t0, 0($t1)
	# Released temporary register $t1
	# Stored to global c
	# Released temporary register $t0
	# CallPureInst: CALL_PURE __builtin_add_int(a:INTEGER, b:INTEGER) -> (%tmp_addsub_19:INTEGER)
	# Ensuring operand a:INTEGER is in a register
	# Reserved temporary register $t0
	la $t0, a
	lw $t0, 0($t0)
	# Loaded global var a into $t0
	# Ensuring operand b:INTEGER is in a register
	# Reserved temporary register $t1
	la $t1, b
	lw $t1, 0($t1)
	# Loaded global var b into $t1
	# Reserved temporary register $t2
	addu $t2, $t0, $t1
	sw $t2, -20($fp)
	# Stored result of pure call to local %tmp_addsub_19 at -20($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# CallPureInst: CALL_PURE __builtin_add_int(%tmp_addsub_19:INTEGER, c:INTEGER) -> (%tmp_addsub_20:INTEGER)
	# Ensuring operand %tmp_addsub_19:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -20($fp)
	# Loaded local var %tmp_addsub_19 from -20($fp) into $t0
	# Ensuring operand c:INTEGER is in a register
	# Reserved temporary register $t1
	la $t1, c
	lw $t1, 0($t1)
	# Loaded global var c into $t1
	# Reserved temporary register $t2
	addu $t2, $t0, $t1
	sw $t2, -24($fp)
	# Stored result of pure call to local %tmp_addsub_20 at -24($fp)
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# --- Calling function: printf ---
	# Ensuring operand label _S0 is in a register
	# Reserved temporary register $t0
	la $t0, _S0
	# Loaded address of label _S0 into $t0
	move $a0, $t0
	# Ensuring operand %tmp_addsub_20:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -24($fp)
	# Loaded local var %tmp_addsub_20 from -24($fp) into $t1
	move $a1, $t1
	jal printf
	nop
	# Released temporary register $t0
	# Released temporary register $t1
	# --- End of call to printf ---
	# Ensuring operand 0 is in a register
	# Reserved temporary register $t0
	li $t0, 0
	move $v0, $t0
	j main_epilogue
	nop
main_epilogue:
	# Epilogue for main
	lw $ra, 4($fp)
	lw $fp, 0($fp)
	addiu $sp, $sp, 108
	jr $ra
	nop

.data
_newline: .asciiz "\n"
# Global Variables
Pai: .word 3
a: .space 4
b: .space 4
c: .space 4
testBlock: .word 1

# String Literals
_S0: .asciiz "%d\n"

