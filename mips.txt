	.text
	.globl _start
	.globl main
_start:
	jal main
	nop
	move $a0, $v0
	li $v0, 17
	syscall
printf:
	addi $sp, $sp, -32
	sw $ra, 28($sp)
	sw $fp, 24($sp)
	sw $s0, 20($sp)
	sw $s1, 16($sp)
	sw $s2, 12($sp)
	sw $s3, 8($sp)
	sw $s4, 4($sp)
	move $fp, $sp
	move $s0, $a0
	move $s1, $a1
	move $s2, $a2
	move $s3, $a3
	li $s4, 0
printf_loop_start:
	lb $t0, 0($s0)
	beq $t0, $zero, printf_end
	nop
	li $t1, '%'
	bne $t0, $t1, printf_print_char_direct
	nop
	addi $s0, $s0, 1
	lb $t0, 0($s0)
	beq $t0, $zero, printf_end
	nop
	li $t1, 'd'
	bne $t0, $t1, printf_handle_literal_percent
	nop
	move $t1, $s1
	beq $s4, 1, printf_use_arg2
	nop
	beq $s4, 2, printf_use_arg3
	nop
	j printf_perform_print_int
	nop
printf_use_arg2:
	move $t1, $s2
	j printf_perform_print_int
	nop
printf_use_arg3:
	move $t1, $s3
printf_perform_print_int:
	move $a0, $t1
	li $v0, 1
	syscall
	addi $s4, $s4, 1
	j printf_loop_continue
	nop
printf_handle_literal_percent:
	li $t1, '%'
	bne $t0, $t1, printf_unknown_specifier
	nop
printf_print_char_direct:
	move $a0, $t0
	li $v0, 11
	syscall
	j printf_loop_continue
	nop
printf_unknown_specifier:
	li $a0, '%'
	li $v0, 11
	syscall
	move $a0, $t0
	li $v0, 11
	syscall
	j printf_loop_continue
	nop
printf_loop_continue:
	addi $s0, $s0, 1
	j printf_loop_start
	nop
printf_end:
	lw $s4, 4($sp)
	lw $s3, 8($sp)
	lw $s2, 12($sp)
	lw $s1, 16($sp)
	lw $s0, 20($sp)
	lw $fp, 24($sp)
	lw $ra, 28($sp)
	addi $sp, $sp, 32
	jr $ra
	nop
getint:
	addi $sp, $sp, -8
	sw $ra, 4($sp)
	sw $fp, 0($sp)
	move $fp, $sp
	li $v0, 5
	syscall
	lw $fp, 0($sp)
	lw $ra, 4($sp)
	addi $sp, $sp, 8
	jr $ra
	nop
	# Local var '%tmp_arr_load_0' assigned stack offset: -4($fp) (size: 4 bytes)
	# Local var '%tmp_arr_load_1' assigned stack offset: -8($fp) (size: 4 bytes)
	# Local var '%tmp_arr_load_2' assigned stack offset: -12($fp) (size: 4 bytes)
	# Local var '%tmp_arr_load_3' assigned stack offset: -16($fp) (size: 4 bytes)
	# Local var '%tmp_arr_load_4' assigned stack offset: -20($fp) (size: 4 bytes)
	# Local var '%tmp_arr_load_5' assigned stack offset: -24($fp) (size: 4 bytes)
	# Local var '%tmp_arr_load_6' assigned stack offset: -28($fp) (size: 4 bytes)
	# Local var '%tmp_arr_load_7' assigned stack offset: -32($fp) (size: 4 bytes)
	# Local var '%tmp_arr_load_8' assigned stack offset: -36($fp) (size: 4 bytes)
	# Array variable 'arr' needs 24 bytes (6 elements)
	# Local var 'arr' assigned stack offset: -60($fp) (size: 24 bytes)
	# Function main: totalLocalVarSize = -60, frameSize = 68
main:
	# Prologue for main
	addiu $sp, $sp, -68
	sw $ra, 64($sp)
	sw $fp, 60($sp)
	addiu $fp, $sp, 60
	# LoadArrayInst: %tmp_arr_load_0:INTEGER = LOAD arrc:ARRAY(dims=1, sizes=[6], type=INTEGER)[5]
	# Reserved temporary register $t0
	la $t0, arrc
	# Loaded base address of global array 'arrc' into $t0
	# Ensuring operand 5 is in a register
	# Reserved temporary register $t1
	li $t1, 5
	# Index value for 'arrc' is in $t1
	# Reserved temporary register $t2
	li $t2, 4
	# Reserved temporary register $t3
	multu $t1, $t2
	mflo $t3
	# Calculated offset_in_bytes ($t1 * 4) into $t3
	addu $t0, $t0, $t3
	# Calculated final element address for 'arrc[index]' into $t0
	# Reserved temporary register $t4
	lw $t4, 0($t0)
	# Loaded value from 'arrc[index]' into temp reg $t4
	sw $t4, -4($fp)
	# Stored loaded array element to local destination '%tmp_arr_load_0' at offset -4
	# Released temporary register $t4
	# Released temporary register $t3
	# Released temporary register $t2
	# Released temporary register $t1
	# Released temporary register $t0
	# --- End of LoadArrayInst for arrc ---
	# StoreArrayInst: STORE arr:ARRAY(dims=1, sizes=[6], type=INTEGER)[0], 1
	# Reserved temporary register $t0
	addiu $t0, $fp, -60
	# Calculated base address of local array 'arr' (offset -60) into $t0
	# Ensuring operand 0 is in a register
	# Reserved temporary register $t1
	li $t1, 0
	# Index value for 'arr' is in $t1
	# Reserved temporary register $t2
	li $t2, 4
	# Reserved temporary register $t3
	multu $t1, $t2
	mflo $t3
	# Calculated offset_in_bytes ($t1 * 4) into $t3
	addu $t0, $t0, $t3
	# Calculated final element address for 'arr[index]' into $t0
	# Ensuring operand 1 is in a register
	# Reserved temporary register $t4
	li $t4, 1
	# Value to store in 'arr[index]' is in $t4
	sw $t4, 0($t0)
	# Stored value from $t4 into 'arr[index]'
	# Released temporary register $t4
	# Released temporary register $t3
	# Released temporary register $t2
	# Released temporary register $t1
	# Released temporary register $t0
	# --- End of StoreArrayInst for arr ---
	# StoreArrayInst: STORE arr:ARRAY(dims=1, sizes=[6], type=INTEGER)[1], 2
	# Reserved temporary register $t0
	addiu $t0, $fp, -60
	# Calculated base address of local array 'arr' (offset -60) into $t0
	# Ensuring operand 1 is in a register
	# Reserved temporary register $t1
	li $t1, 1
	# Index value for 'arr' is in $t1
	# Reserved temporary register $t2
	li $t2, 4
	# Reserved temporary register $t3
	multu $t1, $t2
	mflo $t3
	# Calculated offset_in_bytes ($t1 * 4) into $t3
	addu $t0, $t0, $t3
	# Calculated final element address for 'arr[index]' into $t0
	# Ensuring operand 2 is in a register
	# Reserved temporary register $t4
	li $t4, 2
	# Value to store in 'arr[index]' is in $t4
	sw $t4, 0($t0)
	# Stored value from $t4 into 'arr[index]'
	# Released temporary register $t4
	# Released temporary register $t3
	# Released temporary register $t2
	# Released temporary register $t1
	# Released temporary register $t0
	# --- End of StoreArrayInst for arr ---
	# StoreArrayInst: STORE arr:ARRAY(dims=1, sizes=[6], type=INTEGER)[2], 3
	# Reserved temporary register $t0
	addiu $t0, $fp, -60
	# Calculated base address of local array 'arr' (offset -60) into $t0
	# Ensuring operand 2 is in a register
	# Reserved temporary register $t1
	li $t1, 2
	# Index value for 'arr' is in $t1
	# Reserved temporary register $t2
	li $t2, 4
	# Reserved temporary register $t3
	multu $t1, $t2
	mflo $t3
	# Calculated offset_in_bytes ($t1 * 4) into $t3
	addu $t0, $t0, $t3
	# Calculated final element address for 'arr[index]' into $t0
	# Ensuring operand 3 is in a register
	# Reserved temporary register $t4
	li $t4, 3
	# Value to store in 'arr[index]' is in $t4
	sw $t4, 0($t0)
	# Stored value from $t4 into 'arr[index]'
	# Released temporary register $t4
	# Released temporary register $t3
	# Released temporary register $t2
	# Released temporary register $t1
	# Released temporary register $t0
	# --- End of StoreArrayInst for arr ---
	# StoreArrayInst: STORE arr:ARRAY(dims=1, sizes=[6], type=INTEGER)[3], 0
	# Reserved temporary register $t0
	addiu $t0, $fp, -60
	# Calculated base address of local array 'arr' (offset -60) into $t0
	# Ensuring operand 3 is in a register
	# Reserved temporary register $t1
	li $t1, 3
	# Index value for 'arr' is in $t1
	# Reserved temporary register $t2
	li $t2, 4
	# Reserved temporary register $t3
	multu $t1, $t2
	mflo $t3
	# Calculated offset_in_bytes ($t1 * 4) into $t3
	addu $t0, $t0, $t3
	# Calculated final element address for 'arr[index]' into $t0
	# Ensuring operand 0 is in a register
	# Reserved temporary register $t4
	li $t4, 0
	# Value to store in 'arr[index]' is in $t4
	sw $t4, 0($t0)
	# Stored value from $t4 into 'arr[index]'
	# Released temporary register $t4
	# Released temporary register $t3
	# Released temporary register $t2
	# Released temporary register $t1
	# Released temporary register $t0
	# --- End of StoreArrayInst for arr ---
	# StoreArrayInst: STORE arr:ARRAY(dims=1, sizes=[6], type=INTEGER)[4], 5
	# Reserved temporary register $t0
	addiu $t0, $fp, -60
	# Calculated base address of local array 'arr' (offset -60) into $t0
	# Ensuring operand 4 is in a register
	# Reserved temporary register $t1
	li $t1, 4
	# Index value for 'arr' is in $t1
	# Reserved temporary register $t2
	li $t2, 4
	# Reserved temporary register $t3
	multu $t1, $t2
	mflo $t3
	# Calculated offset_in_bytes ($t1 * 4) into $t3
	addu $t0, $t0, $t3
	# Calculated final element address for 'arr[index]' into $t0
	# Ensuring operand 5 is in a register
	# Reserved temporary register $t4
	li $t4, 5
	# Value to store in 'arr[index]' is in $t4
	sw $t4, 0($t0)
	# Stored value from $t4 into 'arr[index]'
	# Released temporary register $t4
	# Released temporary register $t3
	# Released temporary register $t2
	# Released temporary register $t1
	# Released temporary register $t0
	# --- End of StoreArrayInst for arr ---
	# StoreArrayInst: STORE arr:ARRAY(dims=1, sizes=[6], type=INTEGER)[5], 6
	# Reserved temporary register $t0
	addiu $t0, $fp, -60
	# Calculated base address of local array 'arr' (offset -60) into $t0
	# Ensuring operand 5 is in a register
	# Reserved temporary register $t1
	li $t1, 5
	# Index value for 'arr' is in $t1
	# Reserved temporary register $t2
	li $t2, 4
	# Reserved temporary register $t3
	multu $t1, $t2
	mflo $t3
	# Calculated offset_in_bytes ($t1 * 4) into $t3
	addu $t0, $t0, $t3
	# Calculated final element address for 'arr[index]' into $t0
	# Ensuring operand 6 is in a register
	# Reserved temporary register $t4
	li $t4, 6
	# Value to store in 'arr[index]' is in $t4
	sw $t4, 0($t0)
	# Stored value from $t4 into 'arr[index]'
	# Released temporary register $t4
	# Released temporary register $t3
	# Released temporary register $t2
	# Released temporary register $t1
	# Released temporary register $t0
	# --- End of StoreArrayInst for arr ---
	# StoreArrayInst: STORE arr:ARRAY(dims=1, sizes=[6], type=INTEGER)[3], 4
	# Reserved temporary register $t0
	addiu $t0, $fp, -60
	# Calculated base address of local array 'arr' (offset -60) into $t0
	# Ensuring operand 3 is in a register
	# Reserved temporary register $t1
	li $t1, 3
	# Index value for 'arr' is in $t1
	# Reserved temporary register $t2
	li $t2, 4
	# Reserved temporary register $t3
	multu $t1, $t2
	mflo $t3
	# Calculated offset_in_bytes ($t1 * 4) into $t3
	addu $t0, $t0, $t3
	# Calculated final element address for 'arr[index]' into $t0
	# Ensuring operand 4 is in a register
	# Reserved temporary register $t4
	li $t4, 4
	# Value to store in 'arr[index]' is in $t4
	sw $t4, 0($t0)
	# Stored value from $t4 into 'arr[index]'
	# Released temporary register $t4
	# Released temporary register $t3
	# Released temporary register $t2
	# Released temporary register $t1
	# Released temporary register $t0
	# --- End of StoreArrayInst for arr ---
	# LoadArrayInst: %tmp_arr_load_1:INTEGER = LOAD arr:ARRAY(dims=1, sizes=[6], type=INTEGER)[0]
	# Reserved temporary register $t0
	addiu $t0, $fp, -60
	# Calculated base address of local array 'arr' (offset -60) into $t0
	# Ensuring operand 0 is in a register
	# Reserved temporary register $t1
	li $t1, 0
	# Index value for 'arr' is in $t1
	# Reserved temporary register $t2
	li $t2, 4
	# Reserved temporary register $t3
	multu $t1, $t2
	mflo $t3
	# Calculated offset_in_bytes ($t1 * 4) into $t3
	addu $t0, $t0, $t3
	# Calculated final element address for 'arr[index]' into $t0
	# Reserved temporary register $t4
	lw $t4, 0($t0)
	# Loaded value from 'arr[index]' into temp reg $t4
	sw $t4, -8($fp)
	# Stored loaded array element to local destination '%tmp_arr_load_1' at offset -8
	# Released temporary register $t4
	# Released temporary register $t3
	# Released temporary register $t2
	# Released temporary register $t1
	# Released temporary register $t0
	# --- End of LoadArrayInst for arr ---
	# LoadArrayInst: %tmp_arr_load_2:INTEGER = LOAD arr:ARRAY(dims=1, sizes=[6], type=INTEGER)[1]
	# Reserved temporary register $t0
	addiu $t0, $fp, -60
	# Calculated base address of local array 'arr' (offset -60) into $t0
	# Ensuring operand 1 is in a register
	# Reserved temporary register $t1
	li $t1, 1
	# Index value for 'arr' is in $t1
	# Reserved temporary register $t2
	li $t2, 4
	# Reserved temporary register $t3
	multu $t1, $t2
	mflo $t3
	# Calculated offset_in_bytes ($t1 * 4) into $t3
	addu $t0, $t0, $t3
	# Calculated final element address for 'arr[index]' into $t0
	# Reserved temporary register $t4
	lw $t4, 0($t0)
	# Loaded value from 'arr[index]' into temp reg $t4
	sw $t4, -12($fp)
	# Stored loaded array element to local destination '%tmp_arr_load_2' at offset -12
	# Released temporary register $t4
	# Released temporary register $t3
	# Released temporary register $t2
	# Released temporary register $t1
	# Released temporary register $t0
	# --- End of LoadArrayInst for arr ---
	# --- Calling function: printArr1 ---
	# Ensuring operand %tmp_arr_load_1:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -8($fp)
	# Loaded local var %tmp_arr_load_1 from -8($fp) into $t0
	move $a0, $t0
	# Ensuring operand %tmp_arr_load_2:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -12($fp)
	# Loaded local var %tmp_arr_load_2 from -12($fp) into $t1
	move $a1, $t1
	jal printArr1
	nop
	# Released temporary register $t0
	# Released temporary register $t1
	# --- End of call to printArr1 ---
	# LoadArrayInst: %tmp_arr_load_3:INTEGER = LOAD arr:ARRAY(dims=1, sizes=[6], type=INTEGER)[0]
	# Reserved temporary register $t0
	addiu $t0, $fp, -60
	# Calculated base address of local array 'arr' (offset -60) into $t0
	# Ensuring operand 0 is in a register
	# Reserved temporary register $t1
	li $t1, 0
	# Index value for 'arr' is in $t1
	# Reserved temporary register $t2
	li $t2, 4
	# Reserved temporary register $t3
	multu $t1, $t2
	mflo $t3
	# Calculated offset_in_bytes ($t1 * 4) into $t3
	addu $t0, $t0, $t3
	# Calculated final element address for 'arr[index]' into $t0
	# Reserved temporary register $t4
	lw $t4, 0($t0)
	# Loaded value from 'arr[index]' into temp reg $t4
	sw $t4, -16($fp)
	# Stored loaded array element to local destination '%tmp_arr_load_3' at offset -16
	# Released temporary register $t4
	# Released temporary register $t3
	# Released temporary register $t2
	# Released temporary register $t1
	# Released temporary register $t0
	# --- End of LoadArrayInst for arr ---
	# LoadArrayInst: %tmp_arr_load_4:INTEGER = LOAD arr:ARRAY(dims=1, sizes=[6], type=INTEGER)[1]
	# Reserved temporary register $t0
	addiu $t0, $fp, -60
	# Calculated base address of local array 'arr' (offset -60) into $t0
	# Ensuring operand 1 is in a register
	# Reserved temporary register $t1
	li $t1, 1
	# Index value for 'arr' is in $t1
	# Reserved temporary register $t2
	li $t2, 4
	# Reserved temporary register $t3
	multu $t1, $t2
	mflo $t3
	# Calculated offset_in_bytes ($t1 * 4) into $t3
	addu $t0, $t0, $t3
	# Calculated final element address for 'arr[index]' into $t0
	# Reserved temporary register $t4
	lw $t4, 0($t0)
	# Loaded value from 'arr[index]' into temp reg $t4
	sw $t4, -20($fp)
	# Stored loaded array element to local destination '%tmp_arr_load_4' at offset -20
	# Released temporary register $t4
	# Released temporary register $t3
	# Released temporary register $t2
	# Released temporary register $t1
	# Released temporary register $t0
	# --- End of LoadArrayInst for arr ---
	# LoadArrayInst: %tmp_arr_load_5:INTEGER = LOAD arr:ARRAY(dims=1, sizes=[6], type=INTEGER)[2]
	# Reserved temporary register $t0
	addiu $t0, $fp, -60
	# Calculated base address of local array 'arr' (offset -60) into $t0
	# Ensuring operand 2 is in a register
	# Reserved temporary register $t1
	li $t1, 2
	# Index value for 'arr' is in $t1
	# Reserved temporary register $t2
	li $t2, 4
	# Reserved temporary register $t3
	multu $t1, $t2
	mflo $t3
	# Calculated offset_in_bytes ($t1 * 4) into $t3
	addu $t0, $t0, $t3
	# Calculated final element address for 'arr[index]' into $t0
	# Reserved temporary register $t4
	lw $t4, 0($t0)
	# Loaded value from 'arr[index]' into temp reg $t4
	sw $t4, -24($fp)
	# Stored loaded array element to local destination '%tmp_arr_load_5' at offset -24
	# Released temporary register $t4
	# Released temporary register $t3
	# Released temporary register $t2
	# Released temporary register $t1
	# Released temporary register $t0
	# --- End of LoadArrayInst for arr ---
	# LoadArrayInst: %tmp_arr_load_6:INTEGER = LOAD arr:ARRAY(dims=1, sizes=[6], type=INTEGER)[3]
	# Reserved temporary register $t0
	addiu $t0, $fp, -60
	# Calculated base address of local array 'arr' (offset -60) into $t0
	# Ensuring operand 3 is in a register
	# Reserved temporary register $t1
	li $t1, 3
	# Index value for 'arr' is in $t1
	# Reserved temporary register $t2
	li $t2, 4
	# Reserved temporary register $t3
	multu $t1, $t2
	mflo $t3
	# Calculated offset_in_bytes ($t1 * 4) into $t3
	addu $t0, $t0, $t3
	# Calculated final element address for 'arr[index]' into $t0
	# Reserved temporary register $t4
	lw $t4, 0($t0)
	# Loaded value from 'arr[index]' into temp reg $t4
	sw $t4, -28($fp)
	# Stored loaded array element to local destination '%tmp_arr_load_6' at offset -28
	# Released temporary register $t4
	# Released temporary register $t3
	# Released temporary register $t2
	# Released temporary register $t1
	# Released temporary register $t0
	# --- End of LoadArrayInst for arr ---
	# LoadArrayInst: %tmp_arr_load_7:INTEGER = LOAD arr:ARRAY(dims=1, sizes=[6], type=INTEGER)[4]
	# Reserved temporary register $t0
	addiu $t0, $fp, -60
	# Calculated base address of local array 'arr' (offset -60) into $t0
	# Ensuring operand 4 is in a register
	# Reserved temporary register $t1
	li $t1, 4
	# Index value for 'arr' is in $t1
	# Reserved temporary register $t2
	li $t2, 4
	# Reserved temporary register $t3
	multu $t1, $t2
	mflo $t3
	# Calculated offset_in_bytes ($t1 * 4) into $t3
	addu $t0, $t0, $t3
	# Calculated final element address for 'arr[index]' into $t0
	# Reserved temporary register $t4
	lw $t4, 0($t0)
	# Loaded value from 'arr[index]' into temp reg $t4
	sw $t4, -32($fp)
	# Stored loaded array element to local destination '%tmp_arr_load_7' at offset -32
	# Released temporary register $t4
	# Released temporary register $t3
	# Released temporary register $t2
	# Released temporary register $t1
	# Released temporary register $t0
	# --- End of LoadArrayInst for arr ---
	# LoadArrayInst: %tmp_arr_load_8:INTEGER = LOAD arr:ARRAY(dims=1, sizes=[6], type=INTEGER)[5]
	# Reserved temporary register $t0
	addiu $t0, $fp, -60
	# Calculated base address of local array 'arr' (offset -60) into $t0
	# Ensuring operand 5 is in a register
	# Reserved temporary register $t1
	li $t1, 5
	# Index value for 'arr' is in $t1
	# Reserved temporary register $t2
	li $t2, 4
	# Reserved temporary register $t3
	multu $t1, $t2
	mflo $t3
	# Calculated offset_in_bytes ($t1 * 4) into $t3
	addu $t0, $t0, $t3
	# Calculated final element address for 'arr[index]' into $t0
	# Reserved temporary register $t4
	lw $t4, 0($t0)
	# Loaded value from 'arr[index]' into temp reg $t4
	sw $t4, -36($fp)
	# Stored loaded array element to local destination '%tmp_arr_load_8' at offset -36
	# Released temporary register $t4
	# Released temporary register $t3
	# Released temporary register $t2
	# Released temporary register $t1
	# Released temporary register $t0
	# --- End of LoadArrayInst for arr ---
	# --- Calling function: printArr2 ---
	# Ensuring operand %tmp_arr_load_8:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -36($fp)
	# Loaded local var %tmp_arr_load_8 from -36($fp) into $t0
	addiu $sp, $sp, -4
	sw $t0, 0($sp)
	# Pushed argument 6 onto stack
	# Released temporary register $t0
	# Ensuring operand %tmp_arr_load_7:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -32($fp)
	# Loaded local var %tmp_arr_load_7 from -32($fp) into $t0
	addiu $sp, $sp, -4
	sw $t0, 0($sp)
	# Pushed argument 5 onto stack
	# Released temporary register $t0
	# Ensuring operand %tmp_arr_load_3:INTEGER is in a register
	# Reserved temporary register $t0
	lw $t0, -16($fp)
	# Loaded local var %tmp_arr_load_3 from -16($fp) into $t0
	move $a0, $t0
	# Ensuring operand %tmp_arr_load_4:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -20($fp)
	# Loaded local var %tmp_arr_load_4 from -20($fp) into $t1
	move $a1, $t1
	# Ensuring operand %tmp_arr_load_5:INTEGER is in a register
	# Reserved temporary register $t2
	lw $t2, -24($fp)
	# Loaded local var %tmp_arr_load_5 from -24($fp) into $t2
	move $a2, $t2
	# Ensuring operand %tmp_arr_load_6:INTEGER is in a register
	# Reserved temporary register $t3
	lw $t3, -28($fp)
	# Loaded local var %tmp_arr_load_6 from -28($fp) into $t3
	move $a3, $t3
	jal printArr2
	nop
	addiu $sp, $sp, 8
	# Cleaned up 2 stack arguments
	# Released temporary register $t0
	# Released temporary register $t1
	# Released temporary register $t2
	# Released temporary register $t3
	# --- End of call to printArr2 ---
	# Ensuring operand 0 is in a register
	# Reserved temporary register $t0
	li $t0, 0
	move $v0, $t0
	j main_epilogue
	nop
main_epilogue:
	# Epilogue for main
	lw $ra, 4($fp)
	lw $fp, 0($fp)
	addiu $sp, $sp, 68
	jr $ra
	nop
	# Parameter 'v0' assigned stack offset: -4($fp)
	# Parameter 'v1' assigned stack offset: -8($fp)
	# Function printArr1: totalLocalVarSize = -8, frameSize = 16
printArr1:
	# Prologue for printArr1
	addiu $sp, $sp, -16
	sw $ra, 12($sp)
	sw $fp, 8($sp)
	addiu $fp, $sp, 8
	sw $a0, -4($fp)
	# Stored $a0 (param 'v0') to -4($fp)
	sw $a1, -8($fp)
	# Stored $a1 (param 'v1') to -8($fp)
	# --- Calling function: printf ---
	# Ensuring operand label _S0 is in a register
	# Reserved temporary register $t0
	la $t0, _S0
	# Loaded address of label _S0 into $t0
	move $a0, $t0
	# Ensuring operand v0:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -4($fp)
	# Loaded local var v0 from -4($fp) into $t1
	move $a1, $t1
	jal printf
	nop
	# Released temporary register $t0
	# Released temporary register $t1
	# --- End of call to printf ---
	# --- Calling function: printf ---
	# Ensuring operand label _S1 is in a register
	# Reserved temporary register $t0
	la $t0, _S1
	# Loaded address of label _S1 into $t0
	move $a0, $t0
	# Ensuring operand v1:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -8($fp)
	# Loaded local var v1 from -8($fp) into $t1
	move $a1, $t1
	jal printf
	nop
	# Released temporary register $t0
	# Released temporary register $t1
	# --- End of call to printf ---
printArr1_epilogue:
	# Epilogue for printArr1
	lw $ra, 4($fp)
	lw $fp, 0($fp)
	addiu $sp, $sp, 16
	jr $ra
	nop
	# Parameter 'v00' assigned stack offset: -4($fp)
	# Parameter 'v01' assigned stack offset: -8($fp)
	# Parameter 'v10' assigned stack offset: -12($fp)
	# Parameter 'v11' assigned stack offset: -16($fp)
	# Parameter 'v20' assigned stack offset: -20($fp)
	# Parameter 'v21' assigned stack offset: -24($fp)
	# Function printArr2: totalLocalVarSize = -24, frameSize = 32
printArr2:
	# Prologue for printArr2
	addiu $sp, $sp, -32
	sw $ra, 28($sp)
	sw $fp, 24($sp)
	addiu $fp, $sp, 24
	sw $a0, -4($fp)
	# Stored $a0 (param 'v00') to -4($fp)
	sw $a1, -8($fp)
	# Stored $a1 (param 'v01') to -8($fp)
	sw $a2, -12($fp)
	# Stored $a2 (param 'v10') to -12($fp)
	sw $a3, -16($fp)
	# Stored $a3 (param 'v11') to -16($fp)
	lw $t0, 8($fp)
	sw $t0, -20($fp)
	# Loaded stack param 'v20' from 8($fp) to -20($fp)
	lw $t0, 12($fp)
	sw $t0, -24($fp)
	# Loaded stack param 'v21' from 12($fp) to -24($fp)
	# --- Calling function: printf ---
	# Ensuring operand label _S2 is in a register
	# Reserved temporary register $t0
	la $t0, _S2
	# Loaded address of label _S2 into $t0
	move $a0, $t0
	# Ensuring operand v00:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -4($fp)
	# Loaded local var v00 from -4($fp) into $t1
	move $a1, $t1
	jal printf
	nop
	# Released temporary register $t0
	# Released temporary register $t1
	# --- End of call to printf ---
	# --- Calling function: printf ---
	# Ensuring operand label _S3 is in a register
	# Reserved temporary register $t0
	la $t0, _S3
	# Loaded address of label _S3 into $t0
	move $a0, $t0
	# Ensuring operand v01:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -8($fp)
	# Loaded local var v01 from -8($fp) into $t1
	move $a1, $t1
	jal printf
	nop
	# Released temporary register $t0
	# Released temporary register $t1
	# --- End of call to printf ---
	# --- Calling function: printf ---
	# Ensuring operand label _S4 is in a register
	# Reserved temporary register $t0
	la $t0, _S4
	# Loaded address of label _S4 into $t0
	move $a0, $t0
	# Ensuring operand v10:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -12($fp)
	# Loaded local var v10 from -12($fp) into $t1
	move $a1, $t1
	jal printf
	nop
	# Released temporary register $t0
	# Released temporary register $t1
	# --- End of call to printf ---
	# --- Calling function: printf ---
	# Ensuring operand label _S5 is in a register
	# Reserved temporary register $t0
	la $t0, _S5
	# Loaded address of label _S5 into $t0
	move $a0, $t0
	# Ensuring operand v11:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -16($fp)
	# Loaded local var v11 from -16($fp) into $t1
	move $a1, $t1
	jal printf
	nop
	# Released temporary register $t0
	# Released temporary register $t1
	# --- End of call to printf ---
	# --- Calling function: printf ---
	# Ensuring operand label _S6 is in a register
	# Reserved temporary register $t0
	la $t0, _S6
	# Loaded address of label _S6 into $t0
	move $a0, $t0
	# Ensuring operand v20:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -20($fp)
	# Loaded local var v20 from -20($fp) into $t1
	move $a1, $t1
	jal printf
	nop
	# Released temporary register $t0
	# Released temporary register $t1
	# --- End of call to printf ---
	# --- Calling function: printf ---
	# Ensuring operand label _S7 is in a register
	# Reserved temporary register $t0
	la $t0, _S7
	# Loaded address of label _S7 into $t0
	move $a0, $t0
	# Ensuring operand v21:INTEGER is in a register
	# Reserved temporary register $t1
	lw $t1, -24($fp)
	# Loaded local var v21 from -24($fp) into $t1
	move $a1, $t1
	jal printf
	nop
	# Released temporary register $t0
	# Released temporary register $t1
	# --- End of call to printf ---
printArr2_epilogue:
	# Epilogue for printArr2
	lw $ra, 4($fp)
	lw $fp, 0($fp)
	addiu $sp, $sp, 32
	jr $ra
	nop

.data
_newline: .asciiz "\n"
# Global Variables
arrc: .word 1, 2, 3, 4, 5, 6 # Array: 6 elements, initialized

# String Literals
_S0: .asciiz "arr[0]:%d\n"
_S1: .asciiz "arr[1]:%d\n"
_S2: .asciiz "arr[0][0]:%d\n"
_S3: .asciiz "arr[0][1]:%d\n"
_S4: .asciiz "arr[1][0]:%d\n"
_S5: .asciiz "arr[1][1]:%d\n"
_S6: .asciiz "arr[2][0]:%d\n"
_S7: .asciiz "arr[2][1]:%d\n"

