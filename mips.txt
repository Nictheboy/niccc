	.text
	.globl _start
	.globl main
_start:
	jal main
	nop
	move $a0, $v0
	li $v0, 17
	syscall
printf:
	addi $sp, $sp, -20
	sw $ra, 16($sp)
	sw $fp, 12($sp)
	sw $s0, 8($sp)
	sw $s1, 4($sp)
	sw $s2, 0($sp)
	move $fp, $sp
	move $s0, $a0
	move $s1, $a1
printf_loop_start:
	lb $t0, 0($s0)
	beq $t0, $zero, printf_end
	nop
	li $t1, '%'
	bne $t0, $t1, printf_print_char_direct
	nop
	addi $s0, $s0, 1
	lb $t0, 0($s0)
	beq $t0, $zero, printf_end
	nop
	li $t1, 'd'
	bne $t0, $t1, printf_handle_literal_percent
	nop
	move $a0, $s1
	li $v0, 1
	syscall
	j printf_loop_continue
	nop
printf_handle_literal_percent:
	li $t1, '%'
	bne $t0, $t1, printf_unknown_specifier
	nop
printf_print_char_direct:
	move $a0, $t0
	li $v0, 11
	syscall
	j printf_loop_continue
	nop
printf_unknown_specifier:
	li $a0, '%'
	li $v0, 11
	syscall
	move $a0, $t0
	li $v0, 11
	syscall
	j printf_loop_continue
	nop
printf_loop_continue:
	addi $s0, $s0, 1
	j printf_loop_start
	nop
printf_end:
	lw $s2, 0($sp)
	lw $s1, 4($sp)
	lw $s0, 8($sp)
	lw $fp, 12($sp)
	lw $ra, 16($sp)
	addi $sp, $sp, 20
	jr $ra
	nop
main:
	# Prologue for main
	addiu $sp, $sp, -8
	sw $ra, 4($sp)
	sw $fp, 0($sp)
	move $fp, $sp
	# --- Calling function: printf ---
	# Ensuring operand label _S0 is in a register
	la $t0, _S0
	move $a0, $t0
	jal printf
	nop
	# --- End of call to printf ---
	# --- Calling function: printf ---
	# Ensuring operand label _S1 is in a register
	la $t1, _S1
	move $a0, $t1
	# Ensuring operand 1 is in a register
	li $t2, 1
	move $a1, $t2
	jal printf
	nop
	# --- End of call to printf ---
	# Ensuring operand 0 is in a register
	li $t3, 0
	move $v0, $t3
	# Epilogue for main
	lw $ra, 4($fp)
	lw $fp, 0($fp)
	addiu $sp, $sp, 8
	jr $ra
	nop

.data
_newline: .asciiz "\n"
# String Literals
_S0: .asciiz "hello, world!\n"
_S1: .asciiz "test integer print: %d\n"

